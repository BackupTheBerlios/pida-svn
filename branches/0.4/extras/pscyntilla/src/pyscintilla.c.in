/*
# Author: Roberto Cavada <cavada@irst.itc.it>
# Copyright 2004 by Roberto Cavada
#
# This file contains code that allow you to use the Scintilla text
# widget from within pygtk2.  Pygtk2 is a Python extensions set that
# allow you to use the Gtk2 toolkit in Python programs. The author of
# pygtk2 is James Henstridge <james@daa.com.au>.
# 
# Scintilla <http://www.scintilla.org> is a very powerful editing
# component developed by Neil Hodgson <neilh@scintilla.org>. 
# 
# Also, there exists a python binding of Scintilla for Gtk+-1.x and
# pygtk-0.6.5.  It is named PyGtkScintilla, and it was made by Michele
# Campeotto <moleskine@f2s.com>. 
# 
# PyScintilla2 is partially based on ideas "stolen" from GtkScintilla2, 
# a wrapper of Scintilla for GTK2, which is developed and maintained by
# Dennis J Houy <djhouy@paw.co.za>. 
#
#
# PyScintilla2 is free software; you can redistribute it and/or 
# modify it under the terms of the GNU Lesser General Public 
# License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
#
# PyScintilla2 is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public 
# License along with this library; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
#
#
# If you have any enhancements or bug reports, please send them to me at
# cavada@isrt.itc.it. 
*/


#include <Python.h>

#include <pygobject.h>

#define PLAT_GTK 1
#define GTK 1

#include <gtk/gtk.h>
#include <gdk/gdk.h>

#include "Scintilla.h"
#include "ScintillaWidget.h"

#include "gtkscintilla.h"


/* ---------- forward type declarations ---------- */
PyTypeObject PyScintilla;


/* ---------- types from other modules ---------- */
static PyTypeObject* _PyGObject_Type;
#define PyGObject_Type (*_PyGObject_Type)

static PyTypeObject* _PyGtkFrame_Type;
#define PyGtkFrame_Type (*_PyGtkFrame_Type)


int pyscintilla_init(PyGObject *self, PyObject *args, PyObject *kwargs)
{
  self->obj = (GObject*) gtk_scintilla_new();

  if (!self->obj) {
    PyErr_SetString(PyExc_RuntimeError, "could not create Scintilla object");
    return -1;
  }

  pygobject_register_wrapper((PyObject*) self);
  return 0;
}


PyMethodDef pyscintilla_methods[];


PyTypeObject PyScintilla_Type = {
    PyObject_HEAD_INIT(NULL)
    0,					/* ob_size */
    "scintilla.Scintilla",		/* tp_name */
    sizeof(PyGObject),	        /* tp_basicsize */
    0,					/* tp_itemsize */
    /* methods */
    (destructor)0,			/* tp_dealloc */
    (printfunc)0,			/* tp_print */
    (getattrfunc)0,	/* tp_getattr */
    (setattrfunc)0,	/* tp_setattr */
    (cmpfunc)0,		/* tp_compare */
    (reprfunc)0,		/* tp_repr */
    0,			/* tp_as_number */
    0,		/* tp_as_sequence */
    0,			/* tp_as_mapping */
    (hashfunc)0,		/* tp_hash */
    (ternaryfunc)0,		/* tp_call */
    (reprfunc)0,		/* tp_str */
    (getattrofunc)0,			/* tp_getattro */
    (setattrofunc)0,			/* tp_setattro */
    0,					/* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE, /* tp_flags */
    NULL, 				/* Documentation string */
    (traverseproc)0,			/* tp_traverse */
    (inquiry)0,			/* tp_clear */
    (richcmpfunc)0,	/* tp_richcompare */
    offsetof(PyGObject, weakreflist),             /* tp_weaklistoffset */
    (getiterfunc)0,		/* tp_iter */
    (iternextfunc)0,	/* tp_iternext */
    pyscintilla_methods,			/* tp_methods */
    0,					/* tp_members */
    0,		       	/* tp_getset */
    NULL,				/* tp_base */
    NULL,				/* tp_dict */
    (descrgetfunc)0,	/* tp_descr_get */
    (descrsetfunc)0,	/* tp_descr_set */
    offsetof(PyGObject, inst_dict),                 /* tp_dictoffset */
    (initproc) pyscintilla_init,		/* tp_init */
};



void pyscintilla_register_classes(PyObject* d)
{
  PyObject* module;

  /* loads gobject */
  if ((module = PyImport_ImportModule("gobject")) != NULL) {
    PyObject *moddict = PyModule_GetDict(module);
    
    _PyGObject_Type = (PyTypeObject *) PyDict_GetItemString(moddict, "GObject");
    if (_PyGObject_Type == NULL) {
      PyErr_SetString(PyExc_ImportError,
		      "cannot import name GObject from gobject");
      return;
    }
  } else {
    PyErr_SetString(PyExc_ImportError,
		    "could not import gobject");
    return;
  }
  
  /* loads Frame */
  if ((module = PyImport_ImportModule("gtk")) != NULL) {
    PyObject* moddict = PyModule_GetDict(module);

    _PyGtkFrame_Type = (PyTypeObject *) PyDict_GetItemString(moddict, 
							     "Frame");
  } else {
    Py_FatalError("could not import gtk");
    return;
  }

  pygobject_register_class(d, "Scintilla", TYPE_GTK_SCINTILLA, 
			   &PyScintilla_Type, 
			   Py_BuildValue("(O)", &PyGtkFrame_Type));
    
}


PyObject* pyscintilla_register_constants(PyObject* m)
{  
  /* ----- Generated code begins ----- */
  %constants_defs%
  /* ------ Generated code ends ------ */

  return m;
}


/* ----- Generated code begins ----- */
%methods_definitions%
/* ------ Generated code ends ------ */


/* ----- Generated code begins ----- */
%methods_table%
/* ------ Generated code ends ------ */



