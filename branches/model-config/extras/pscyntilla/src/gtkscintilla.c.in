/*
# Author: Roberto Cavada <cavada@irst.itc.it>
# Copyright 2004 by Roberto Cavada
# Copyright 2005 by Tiago Cogumbreiro
#
# This file contains code that allow you to use the Scintilla text
# widget from within pygtk2.  Pygtk2 is a Python extensions set that
# allow you to use the Gtk2 toolkit in Python programs. The author of
# pygtk2 is James Henstridge <james@daa.com.au>.
# 
# Scintilla <http://www.scintilla.org> is a very powerful editing
# component developed by Neil Hodgson <neilh@scintilla.org>. 
# 
# Also, there exists a python binding of Scintilla for Gtk+-1.x and
# pygtk-0.6.5.  It is named PyGtkScintilla, and it was made by Michele
# Campeotto <moleskine@f2s.com>. 
# 
# PyScintilla2 is partially based on ideas "stolen" from GtkScintilla2, 
# a wrapper of Scintilla for GTK2, which is developed and maintained by
# Dennis J Houy <djhouy@paw.co.za>. 
#
#
# PyScintilla2 is free software; you can redistribute it and/or 
# modify it under the terms of the GNU Lesser General Public 
# License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
#
# PyScintilla2 is distributed in the hope that it will be useful, 
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU 
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public 
# License along with this library; if not, write to the Free Software 
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA.
#
#
# If you have any enhancements or bug reports, please send them to me at
# cavada@isrt.itc.it.
*/

#include "gtkscintilla.h"
#include "marshallers.h"
#include "gtkscintilla_signals.h"

#define GTK      1
#define PLAT_GTK 1

/* ----- Generated code begins ----- */
%set_deprecated_features%
/* ------ Generated code ends ------ */

#include <Scintilla.h>
#include <ScintillaWidget.h>


static void gtk_scintilla_class_init(GtkScintillaClass* klass);
static void gtk_scintilla_init(GtkScintilla* sci);

static void notify_event(GtkWidget* w, gint param, gpointer notif, 
			 gpointer data);

GType gtk_scintilla_get_type(void)
{
    static GType our_type = 0;
    
    if (!our_type) {
        static const GTypeInfo our_info =
        {
            sizeof (GtkScintillaClass),
            NULL,               /* base_init */
            NULL,               /* base_finalize */
            (GClassInitFunc) gtk_scintilla_class_init,
            NULL,               /* class_finalize */
            NULL,               /* class_data */
            sizeof (GtkScintilla),
            0,                  /* n_preallocs */
            (GInstanceInitFunc) gtk_scintilla_init,
        };

        our_type = g_type_register_static(GTK_TYPE_FRAME, "GtkScintilla",
					  &our_info, 0);
    }
    
    return our_type;
}


static void
gtk_scintilla_class_init(GtkScintillaClass* klass)
{
  GtkObjectClass* object_class;
    
  object_class = (GtkObjectClass*) klass;

  gtk_scintilla_set_default_signals(klass);

  /* ----- Generated code begins ----- */
  %signals_construction%
  /* ------ Generated code ends ------ */

}


static void gtk_scintilla_init(GtkScintilla* self)
{
  self->scintilla = GTK_WIDGET(scintilla_new());
  g_signal_connect(G_OBJECT(self->scintilla), SCINTILLA_NOTIFY,
		   G_CALLBACK(notify_event), GTK_WIDGET(self));
    
  gtk_container_add(GTK_CONTAINER(self), self->scintilla);
    
  gtk_widget_set(GTK_WIDGET(self->scintilla), "visible", TRUE, NULL);
  gtk_widget_show(GTK_WIDGET(self->scintilla));
  //gtk_widget_show_all(GTK_WIDGET(self));
}


GtkWidget* gtk_scintilla_new()
{
  GtkScintilla* self;
    
  self = (GtkScintilla*) gtk_type_new(gtk_scintilla_get_type());
    
  return GTK_WIDGET(self);
}


static void notify_event(GtkWidget* w, gint param, gpointer notif, 
			 gpointer data)
{
  struct SCNotification* notification = (struct SCNotification*) notif;
  GtkScintillaClass* klass = GTK_SCINTILLA_GET_CLASS(GTK_SCINTILLA(data));

  switch (notification->nmhdr.code) {

  /* ----- Generated code begins ----- */
  %notif_handling_code%  
  /* ------ Generated code ends ------ */

  default:
    g_warning("GtkScintilla2: Unknown notification code %d (ignored)\n",
	      (gint) notification->nmhdr.code);
    break;
  }
}

